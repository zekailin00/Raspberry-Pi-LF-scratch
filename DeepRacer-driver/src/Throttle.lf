target Cpp {
    cmake-include: "composition.cmake"
};

public preamble {=
    #include <stdio.h>
    #include <stdlib.h>
    #include <iostream>

    #include <pigpio.h>
=}

reactor ThrottleDriver (bias:int(1500), sensitivity:int(-200), pin:int(3)) {
    input norm_throttle:float;
    state pwm_throttle:int(bias);

    reaction(startup) {=
    //   while (gpioInitialise() < 0)
            std::cout << "GPIO initialization Throttle!" << std::endl;
    =}

    reaction(norm_throttle) {=
        pwm_throttle = bias + *norm_throttle.get() * sensitivity;
        //gpioServo(pin, pwm_throttle);
        /*
            gpio: see description
            PWMfreq: 0 (off) or 1-125M (1-187.5M for the BCM2711)
            PWMduty: 0 (off) to 1000000 (1M)(fully on)
        */

       // When ESC is turned on, PWM has to stay as 62000 until a long beep sound

       // 59000 (2.2V) going forward extremely fast
       // 59500 (1.5V) moving, not too fast
       // 60000 (0.7V) no move
       // 62000 (0V) no move // default
       // 65000 (0V) no move
       // 68000 (-1.1V) going backward slow 
       // 69000 (-1.7V) going backward much faster 

        gpioHardwarePWM(18, 50, 59400);
        std::cout << "Set speed to " << pwm_throttle << std::endl;
    =}
}

main reactor {
    timer t(0, 100 ms)
    servo = new ThrottleDriver();

    reaction(t) -> servo.norm_throttle {=
        servo.norm_throttle.set(0.7f);
    =}

    // reaction(t) -> servo.norm_throttle {=
    //     static int i = 0;

    //     servo.norm_throttle.set(0.7f);
    // =}
}
